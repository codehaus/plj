// This file is generated by omniidl (C++ backend)- omniORB_4_0. Do not edit.
#ifndef __callserver_hh__
#define __callserver_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_callserver
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_callserver
#endif





#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE org

_CORBA_MODULE_BEG

  _CORBA_MODULE pgj

  _CORBA_MODULE_BEG

    _CORBA_MODULE corba

    _CORBA_MODULE_BEG

#ifndef __org_mpgj_mcorba_mCallServer__
#define __org_mpgj_mcorba_mCallServer__

      class CallServer;
      class _objref_CallServer;
      class _impl_CallServer;
      
      typedef _objref_CallServer* CallServer_ptr;
      typedef CallServer_ptr CallServerRef;

      class CallServer_Helper {
      public:
        typedef CallServer_ptr _ptr_type;

        static _ptr_type _nil();
        static _CORBA_Boolean is_nil(_ptr_type);
        static void release(_ptr_type);
        static void duplicate(_ptr_type);
        static void marshalObjRef(_ptr_type, cdrStream&);
        static _ptr_type unmarshalObjRef(cdrStream&);
      };

      typedef _CORBA_ObjRef_Var<_objref_CallServer, CallServer_Helper> CallServer_var;
      typedef _CORBA_ObjRef_OUT_arg<_objref_CallServer,CallServer_Helper > CallServer_out;

#endif

      class CallServer {
      public:
        // Declarations for this interface type.
        typedef CallServer_ptr _ptr_type;
        typedef CallServer_var _var_type;

        static _ptr_type _duplicate(_ptr_type);
        static _ptr_type _narrow(CORBA::Object_ptr);
        static _ptr_type _unchecked_narrow(CORBA::Object_ptr);
        static _ptr_type _nil();

        static inline void _marshalObjRef(_ptr_type, cdrStream&);

        static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
          omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
          if (o)
            return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
          else
            return _nil();
        }

        static _core_attr const char* _PD_repoId;

        // Other IDL defined within this scope.
        
      };

      class _objref_CallServer :
        public virtual CORBA::Object, public virtual omniObjRef
      {
      public:
        void sendMessage(const CORBA::Any& message);
        CORBA::Any* receiveAnsver(const char* sid);
        CORBA::Any* SendReceive(const CORBA::Any& message);

        inline _objref_CallServer()  { _PR_setobj(0); }  // nil
        _objref_CallServer(omniIOR*, omniIdentity*);

      protected:
        virtual ~_objref_CallServer();

        
      private:
        virtual void* _ptrToObjRef(const char*);

        _objref_CallServer(const _objref_CallServer&);
        _objref_CallServer& operator = (const _objref_CallServer&);
        // not implemented
      };

      class _pof_CallServer : public _OMNI_NS(proxyObjectFactory) {
      public:
        inline _pof_CallServer() : _OMNI_NS(proxyObjectFactory)(CallServer::_PD_repoId) {}
        virtual ~_pof_CallServer();

        virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
        virtual _CORBA_Boolean is_a(const char*) const;
      };

      class _impl_CallServer :
        public virtual omniServant
      {
      public:
        virtual ~_impl_CallServer();

        virtual void sendMessage(const CORBA::Any& message) = 0;
        virtual CORBA::Any* receiveAnsver(const char* sid) = 0;
        virtual CORBA::Any* SendReceive(const CORBA::Any& message) = 0;
        
      public:  // Really protected, workaround for xlC
        virtual _CORBA_Boolean _dispatch(omniCallHandle&);

      private:
        virtual void* _ptrToInterface(const char*);
        virtual const char* _mostDerivedRepoId();
      };


    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_org
_CORBA_MODULE_BEG

  _CORBA_MODULE pgj
  _CORBA_MODULE_BEG

    _CORBA_MODULE corba
    _CORBA_MODULE_BEG

      class CallServer :
        public virtual org::pgj::corba::_impl_CallServer,
        public virtual PortableServer::ServantBase
      {
      public:
        virtual ~CallServer();

        inline org::pgj::corba::CallServer_ptr _this() {
          return (org::pgj::corba::CallServer_ptr) _do_this(org::pgj::corba::CallServer::_PD_repoId);
        }
      };

    _CORBA_MODULE_END

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
org::pgj::corba::CallServer::_marshalObjRef(::org::pgj::corba::CallServer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_callserver
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_callserver
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_callserver
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_callserver
#endif

#endif  // __callserver_hh__

