/*
 * Created on Jan 23, 2005
 */

package org.plj.devtools.ant;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;

import org.apache.tools.ant.BuildException;
import org.plj.devtools.base.DbPlatform;
import org.plj.devtools.base.Parameter;
import org.plj.devtools.base.PostgreSQLPLJ;

import com.thoughtworks.qdox.ant.AbstractQdoxTask;
import com.thoughtworks.qdox.model.DocletTag;
import com.thoughtworks.qdox.model.JavaClass;
import com.thoughtworks.qdox.model.JavaMethod;
import com.thoughtworks.qdox.model.JavaParameter;
import com.thoughtworks.qdox.model.Type;


/**
 * 
 * 
 * @author Laszlo Hornyak
 */
public class PLJGenerateDeployer extends AbstractQdoxTask {

	DbPlatform dbPlatform = null;

	public void execute() throws BuildException {

		try {
			if (targetPath == null) {
				throw new BuildException(
						"The attribute sourcePath is mandatory");
			}
			super.execute();

			dbPlatform = new PostgreSQLPLJ();
			log("Generating code for "+dbPlatform.getName());

			FileOutputStream fos = null;
			try {
				fos = new FileOutputStream(targetPath + File.separator
						+ platform + ".sql");
			} catch (FileNotFoundException e) {
				throw new BuildException("File not found", e);
			}
			PrintWriter pw = new PrintWriter(fos);
			Calendar cal = new GregorianCalendar();
			cal.setTime(new Date());

			pw.write(dbPlatform.comment("Generated by PL-J DevTools"));
			pw.write(dbPlatform.comment("see: http://plj.codehaus.org/"));
			pw.write(dbPlatform.comment(cal.toString()));
			pw.write("\n\n");
			pw.write(dbPlatform.comment("Deployment file for "+dbPlatform.getName()));

			Iterator i = allClasses.iterator();
			while (i.hasNext()) {

				JavaClass jcl = (JavaClass) i.next();
				log(jcl.getName());
				JavaMethod[] methods = jcl.getMethods();
				for (int j = 0; j < methods.length; j++) {
					JavaMethod m = methods[j];
					if (m == null)
						continue;
					DocletTag udfTag = m.getTagByName("jsproc.udf");
					DocletTag triggerTag = m.getTagByName("jsproc.trigger");


					String triggerName = null;
					if (triggerTag != null) {
						pw.write(dbPlatform.comment(m.getComment()));

						triggerName = triggerTag.getNamedParameter("name");
						if (triggerName == null)
							throw new BuildException(
									"Name parameter is required for tag jsproc.trigger in class "
											+ jcl.getName() + " method "
											+ m.getName());
						log(" - trigger: ");
					} else if (udfTag != null) {
						pw.write(dbPlatform.comment(m.getComment()));

						String udfName = null;
						udfName = udfTag.getNamedParameter("name");
						if (udfName == null)
							throw new BuildException(
									"Name parameter is required for tag jsproc.udf in class "
											+ jcl.getName() + " method "
											+ m.getName());
						log(" - UDF: " + udfName);
						DocletTag[] paramModifiers = m
								.getTagsByName("jsproc.param");
						DocletTag returnModifier = m
								.getTagByName("jsproc.returns");
						Type returns = m.getReturns();
						String returnType = (returnModifier == null)
								? dbPlatform.getDefaultRDBMSType(returns
										.getValue())
								: returnModifier.getValue();

						JavaParameter[] params = m.getParameters();

						List paramList = new ArrayList();
						for (int k = 0; k < params.length; k++) {
							DocletTag pMod = null;
							for (int l = 0; l < paramModifiers.length; l++) {
								String[] parameters = paramModifiers[l]
										.getParameters();
								if (parameters.length > 0
										&& params[k].getName().equals(
												parameters[0])) {
									pMod = paramModifiers[l];
									break;
								}
							}
							Parameter p = makeParameter(params[k], pMod);
							paramList.add(p);
						}

						String cre = dbPlatform.createUdf(jcl.getName(), m
								.getName(), null, m.getComment(), udfName,
								returnType, paramList);
						pw.write(cre);

						log(cre);
					}
				}
			}
			pw.flush();
			pw.close();
		} catch (Exception e) {
			e.printStackTrace();
			throw new BuildException(e);
		}

	}
	private String targetPath = null;
	private String platform = "PostgreSQLPLJ";


	public String getPlatform() {
		return platform;
	}

	public void setPlatform(String platform) {
		this.platform = platform;
	}

	public String getTargetPath() {
		return targetPath;
	}

	public void setTargetPath(String targetPath) {
		this.targetPath = targetPath;
	}

	private Parameter makeParameter(JavaParameter paramDesc, DocletTag tag) {
		Parameter p = new Parameter();
		if (tag != null) {
			String desc[] = tag.getParameters();
			int mode = 0;
			if ("in".equals(desc[1])) {
				mode = Parameter.mode_in;
			} else if ("out".equals(desc[1])) {
				mode = Parameter.mode_out;
			} else {
				mode = Parameter.mode_inout;
			}
			p.setMode(mode);
			p.setRdbmsType(desc[2]);
		} else {
			p.setMode(Parameter.mode_in);
		}
		p.setName(paramDesc.getName());
		p.setType("");
		return p;
	}

}